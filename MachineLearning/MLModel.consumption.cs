// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace MLNetReactor
{
    public partial class MLModel
    {
        /// <summary>
        /// model input class for MLModel.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [LoadColumn(0)]
            [ColumnName(@"age")]
            public float Age { get; set; }

            [LoadColumn(1)]
            [ColumnName(@"workclass")]
            public string Workclass { get; set; }

            [LoadColumn(2)]
            [ColumnName(@"column3")]
            public float Column3 { get; set; }

            [LoadColumn(3)]
            [ColumnName(@"education")]
            public string Education { get; set; }

            [LoadColumn(4)]
            [ColumnName(@"education-num")]
            public float Education_num { get; set; }

            [LoadColumn(5)]
            [ColumnName(@"marital-status")]
            public string Marital_status { get; set; }

            [LoadColumn(6)]
            [ColumnName(@"occupation")]
            public string Occupation { get; set; }

            [LoadColumn(7)]
            [ColumnName(@"relationship")]
            public string Relationship { get; set; }

            [LoadColumn(8)]
            [ColumnName(@"race")]
            public string Race { get; set; }

            [LoadColumn(9)]
            [ColumnName(@"sex")]
            public string Sex { get; set; }

            [LoadColumn(10)]
            [ColumnName(@"capital-gain")]
            public float Capital_gain { get; set; }

            [LoadColumn(11)]
            [ColumnName(@"capital-loss")]
            public float Capital_loss { get; set; }

            [LoadColumn(12)]
            [ColumnName(@"hours-per-week")]
            public float Hours_per_week { get; set; }

            [LoadColumn(13)]
            [ColumnName(@"native-country")]
            public string Native_country { get; set; }

            [LoadColumn(14)]
            [ColumnName(@"Income")]
            public string Income { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for MLModel.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"age")]
            public float Age { get; set; }

            [ColumnName(@"workclass")]
            public float[] Workclass { get; set; }

            [ColumnName(@"column3")]
            public float Column3 { get; set; }

            [ColumnName(@"education")]
            public float[] Education { get; set; }

            [ColumnName(@"education-num")]
            public float Education_num { get; set; }

            [ColumnName(@"marital-status")]
            public float[] Marital_status { get; set; }

            [ColumnName(@"occupation")]
            public float[] Occupation { get; set; }

            [ColumnName(@"relationship")]
            public float[] Relationship { get; set; }

            [ColumnName(@"race")]
            public float[] Race { get; set; }

            [ColumnName(@"sex")]
            public float[] Sex { get; set; }

            [ColumnName(@"capital-gain")]
            public float Capital_gain { get; set; }

            [ColumnName(@"capital-loss")]
            public float Capital_loss { get; set; }

            [ColumnName(@"hours-per-week")]
            public float Hours_per_week { get; set; }

            [ColumnName(@"native-country")]
            public float[] Native_country { get; set; }

            [ColumnName(@"Income")]
            public float[] Income { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"Score")]
            public float Score { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("MLModel.mlnet");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);


        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }
    }
}
